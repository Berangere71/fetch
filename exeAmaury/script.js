/************************************************************
 *  - Comprendre comment relier un formulaire HTML √† du JS
 *  - Utiliser fetch() pour appeler une API
 *  - Manipuler le DOM pour afficher des donn√©es m√©t√©o
 ************************************************************/


/* ----------------------------------------------------------
   1Ô∏è‚É£ Fonction principale ‚Äî point d‚Äôentr√©e du script
   ----------------------------------------------------------
   ‚ûú Elle √©coute :
      - le submit sur formulaire
      - le clic sur "me localiser"
----------------------------------------------------------*/
function main() {

    // R√©cup√©ration des √©l√©ments HTML
    const search = document.querySelector('.search-bar');   // le <form>
    const cityInput = document.querySelector('.cityInput'); // le champ texte
    const findMeBtn = document.querySelector('.find-me');   // le bouton GPS


    /* üß† Rappel :
       - addEventListener() permet d‚Äô√©couter un √©v√©nement
       - preventDefault() emp√™che le rechargement de la page
       - cityInput.value renvoie le texte tap√©
    */

    // üëâ Quand l'utilisateur valide le formulaire
    search.addEventListener('submit', event => {
        event.preventDefault();

        // TODO : r√©cup√©rer le texte tap√© par l‚Äôutilisateur
        const city = /* ... */;

        // TODO : nettoyer le texte (trim) et v√©rifier qu‚Äôil n‚Äôest pas vide

        // TODO : IF city => appeller la fonction pour rechercher city
    });


    // üëâ Quand l'utilisateur clique sur "Me localiser"
    findMeBtn.addEventListener('click', () => {
        /* üí° navigator.geolocation.getCurrentPosition() :
           demande la position GPS du navigateur
           ‚Üí appelle la fonction onPosition() si accept√©
        */

        // TODO : compl√©ter la ligne ci-dessous :
        navigator.geolocation./*...*/(/* ... */);
    });
}

// On lance l‚Äôapplication
main();



/* ----------------------------------------------------------
   2Ô∏è‚É£ Recherche d'une ville ‚Üí obtenir ses coordonn√©es
   ----------------------------------------------------------
   On appelle ici l‚ÄôAPI de g√©ocodage Open-Meteo :
   elle transforme un nom de ville en latitude + longitude.
----------------------------------------------------------*/
function searchCity(cityName) {

    // URL de l‚ÄôAPI g√©ocodage
    const url = `https://geocoding-api.open-meteo.com/v1/search?name=${cityName}&count=1&language=fr&format=json`;

    // TODO :
    // 1. Fais un fetch(url)
    // 2. Convertis la r√©ponse en JSON
    // 3. R√©cup√®re la latitude, la longitude et le nom de la ville
    // 4. Appelle ensuite : weather(lat, long, displayName)
}




/* ----------------------------------------------------------
   3Ô∏è‚É£ R√©cup√©ration des donn√©es m√©t√©o via l‚ÄôAPI principale
   ----------------------------------------------------------
   Cette API utilise les coordonn√©es pour renvoyer :
   - la temp√©rature actuelle
   - le code m√©t√©o (type de temps)
   - d'autres infos si besoin
----------------------------------------------------------*/
function weather(lat, long, placeName) {

    // URL de l‚ÄôAPI m√©t√©o
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${long}&current=is_day,temperature_2m,weather_code,precipitation`;

    // TODO :
    // - fais un fetch(url)
    // - convertis en JSON
    // - r√©cup√®re :
    //     const temperature = data.current.temperature_2m;
    //     const code = /*....*/.weathercode;

    // - appelle displayWeather(placeName, temperature, code);
}



/* ----------------------------------------------------------
   4Ô∏è‚É£ Affichage des donn√©es dans la page
   ----------------------------------------------------------
   On met √† jour les √©l√©ments HTML :
   - la ville
   - la temp√©rature
   - l‚Äôic√¥ne m√©t√©o
----------------------------------------------------------*/
function displayWeather(place, temperature, code) {
    /* üí° document.querySelector('.display-city')
          permet de cibler un √©l√©ment HTML (par sa classe)
       üí° .textContent sert √† modifier le texte affich√©
    */

    // TODO : afficher le nom de la ville
    // document.querySelector('.display-city').textContent = /* ... */;

    // TODO : afficher la temp√©rature avec " ¬∞C"
    // document.querySelector('.display-temp').textContent = /* ... */;

    //TODO : appeler la fonction iconByCode
}



/* ----------------------------------------------------------
   5Ô∏è‚É£ Choisir l‚Äôic√¥ne m√©t√©o selon le code re√ßu
   ----------------------------------------------------------
   Chaque code correspond √† un type de temps :
   - 0 = ciel clair ‚òÄÔ∏è   ('fa-sun')
   - 1-2 = partiellement nuageux ‚õÖ ('fa-cloud-sun')
   - 3 = couvert ‚òÅÔ∏è         ('fa-cloud')
   - 45‚Äì48 = brouillard üå´Ô∏è  ('fa-smog')
   - 51‚Äì67 = pluie üåßÔ∏è   ('fa-cloud-rain')
   - 71‚Äì77 = neige ‚ùÑÔ∏è   ('fa-snowflake')
   - 80‚Äì82 = averses üå¶Ô∏è ('fa-cloud-showers-heavy')
   - 95‚Äì99 = orages ‚õàÔ∏è  ('fa-cloud-bolt')
   - Default =          ('fa-temperature-half')
----------------------------------------------------------*/
function iconByCode(code) {
    // S√©lection de l‚Äô√©l√©ment ic√¥ne
    const icon = document.querySelector('.weather-icon');

    // On r√©initialise ses classes
    icon.className = 'weather-icon fa-solid';

    /* üí° FontAwesome fonctionne avec des classes comme :
         fa-sun, fa-cloud-sun, fa-cloud, fa-smog, etc.
       üí° On ajoute aussi une couleur (classe CSS : sun, rain, fog...)
    */

    // TODO : compl√©ter les conditions ci-dessous, s'aider du tableau plus haut pour le nom des fontAwesome

    if (code === 0) icon.classList.add('fa-sun');
    // Peu nuageux / partiellement nuageux
    else if (code === 1 || code === 2) icon.classList.add('fa-cloud-sun');
    // Couvert
    else if (code === 3) /*...*/;
    // Brouillard / brume
    else if (code >= 45 && code <= 48) /*...*/;
    // Bruine / pluie l√©g√®re √† forte
    else if (code >= 51 && code <= 67) /*...*/;
    // Neige
    else if (code >= 71 && code <= 77) /*...*/;
    // Averses
    else if (code >= 80 && code <= 82) /*...*/;
    // Orages
    else if (code >= 95 && code <= 99) /*...*/;
    // orage
    else icon.classList.add/*...*/;
    // valeur par d√©faut (si aucun code reconnu)
}



/* ----------------------------------------------------------
   6Ô∏è‚É£ G√©olocalisation
   ----------------------------------------------------------
   Si l‚Äôutilisateur accepte le partage de position,
   on r√©cup√®re directement ses coordonn√©es GPS.
----------------------------------------------------------*/
function onPosition(userCoords) {

    // TODO :
    // - r√©cup√©rer la latitude et la longitude depuis userCoords.coords
    const latUser = userCoords.coords.latitude;

    //TODO optionel : appeler la fonction pour remplir le formulaire

    // Appel de la fonction pour r√©cuperer la m√©t√©o √† partir des param√®tres (lat et long);
}



/* ----------------------------------------------------------
   7Ô∏è‚É£ Option : afficher les coordonn√©es dans le formulaire
----------------------------------------------------------*/
function putCoords(lat, long) {
    document.querySelector('.latitude').value = lat;
    document.querySelector('.longitude').value = long;
}